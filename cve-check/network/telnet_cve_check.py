PORTS = [23]

CVE_MAPPINGS = {
    "Telnetd 1.2": "CVE-2001-0554",
    "Telnetd 1.1": "CVE-1999-0611",
    "Telnetd 1.0": "CVE-1999-0651",
    "Telnetd 1.3": "CVE-2002-1561",
    "Telnetd 1.4": "CVE-2003-0026",
    "Telnetd 1.5": "CVE-2005-0469",
    "Telnetd 1.6": "CVE-2007-0882",
    "Telnetd 1.7": "CVE-2008-1446",
    "Telnetd 1.8": "CVE-2011-4862",
    "Telnetd 1.9": "CVE-2014-4877",
    "Telnetd 2.0": "CVE-2017-1000367",
    "Telnetd 2.1": "CVE-2018-1000120",
    "Telnetd 2.2": "CVE-2019-13224",
    "Telnetd 2.3": "CVE-2020-10188",
    "BSD Telnetd 1.0": "CVE-2001-0554",
    "BSD Telnetd 1.1": "CVE-2005-0469",
    "Solaris Telnetd 1.0": "CVE-2007-0882",
    "Solaris Telnetd 1.1": "CVE-2008-1446",
    "Cisco Telnetd 1.0": "CVE-2004-0367",
    "Cisco Telnetd 1.1": "CVE-2011-4862"
}

def run(host, results):
    import socket
    try:
        s = socket.socket()
        s.settimeout(5)
        s.connect((host, 23))
        banner = s.recv(1024).decode(errors='ignore')
        cve = None
        for key, val in CVE_MAPPINGS.items():
            if key in banner:
                cve = val
                break
            if cve:
                results[host].setdefault("CVE-CHECK", []).append(f"Potential CVE detected: {cve} via Telnet banner: {banner.strip()}")
        s.close()
    except Exception:
        pass  
