PORTS = [22]

CVE_MAPPINGS = {
    "OpenSSH_7.2p2": "CVE-2016-0777",
    "OpenSSH_8.2p1": "CVE-2020-15778",
    "OpenSSH_8.0p1": "CVE-2019-6111",
    "OpenSSH_7.9p1": "CVE-2018-20685",
    "OpenSSH_7.4p1": "CVE-2017-15906",
    "OpenSSH_7.3p1": "CVE-2016-10010",
    "OpenSSH_7.1p2": "CVE-2016-0777",
    "OpenSSH_6.6.1p1": "CVE-2015-5600",
    "OpenSSH_6.2p2": "CVE-2014-2532",
    "OpenSSH_6.0p1": "CVE-2012-0814",
    "OpenSSH_5.9p1": "CVE-2012-0814",
    "OpenSSH_5.3p1": "CVE-2010-4478",
    "OpenSSH_5.1p1": "CVE-2008-5161",
    "OpenSSH_4.7p1": "CVE-2008-4109",
    "OpenSSH_4.3p2": "CVE-2006-5051",
    "OpenSSH_3.9p1": "CVE-2004-2760",
    "OpenSSH_3.6.1p2": "CVE-2003-0190",
    "Dropbear_2016.74": "CVE-2016-7406",
    "Dropbear_2015.67": "CVE-2015-9054",
    "Cisco-SSH_1.25": "CVE-2018-15473"
}

def run(host, results):
    import socket
    try:
        s = socket.socket()
        s.settimeout(5)
        s.connect((host, 22))
        banner = s.recv(1024).decode(errors='ignore')
        cve = None
        for key, val in CVE_MAPPINGS.items():
            if key in banner:
                cve = val
                break
            if cve:
                results[host].setdefault("CVE-CHECK", []).append(f"Potential CVE detected: {cve} via SSH banner: {banner.strip()}")
        s.close()
    except Exception:
        pass  
