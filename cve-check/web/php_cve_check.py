PORTS = [80, 443]

CVE_MAPPINGS = {
    "PHP/5.4.0": "CVE-2012-1172",
    "PHP/5.5.0": "CVE-2013-2110",
    "PHP/5.6.0": "CVE-2014-3538",
    "PHP/7.0.0": "CVE-2015-8874",
    "PHP/7.1.0": "CVE-2016-7478",
    "PHP/7.2.0": "CVE-2017-9226",
    "PHP/7.3.0": "CVE-2018-19518",
    "PHP/7.4.0": "CVE-2019-11043",
    "PHP/8.0.0": "CVE-2020-7071",
    "PHP/8.1.0": "CVE-2021-21703",
    "PHP/5.3.0": "CVE-2010-1128",
    "PHP/5.2.0": "CVE-2007-0906",
    "PHP/5.1.0": "CVE-2006-5465",
    "PHP/5.0.0": "CVE-2004-1063",
    "PHP/4.4.0": "CVE-2005-3353",
    "PHP/7.0.1": "CVE-2016-1905",
    "PHP/7.1.1": "CVE-2017-5340",
    "PHP/7.2.1": "CVE-2018-7584",
    "PHP/7.3.1": "CVE-2019-9023",
    "PHP/8.0.1": "CVE-2021-21704"
}

def run(host, results):
    import requests
    import re
    for port in [80, 443]:
        proto = "https" if port == 443 else "http"
        url = f"{proto}://{host}:{port}/"
        try:
            resp = requests.get(url, timeout=7, verify=False)
            x_powered = resp.headers.get("X-Powered-By", "N/A")
            found_version = None
            for key in CVE_MAPPINGS:
                if key in x_powered:
                    found_version = key
                    break
            if not found_version:
                meta_match = re.search(r'<meta[^>]+content=["\']PHP/?([0-9.]+)["\']', resp.text, re.IGNORECASE)
                if meta_match:
                    php_version = meta_match.group(1)
                    for key in CVE_MAPPINGS:
                        if key.endswith(php_version):
                            found_version = key
                            break
            cve = CVE_MAPPINGS.get(found_version)
            if cve:
                results[host].setdefault("CVE-CHECK", []).append(
                    f"Potential CVE detected: {cve} via PHP version: {found_version}")
        except Exception:
            pass  
